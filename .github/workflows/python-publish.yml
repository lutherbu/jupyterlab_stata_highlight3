
# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: PyPI

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash -el {0}
        
    steps:
      - uses: actions/checkout@v4
          
      - name: Setup Miniconda
        # You may pin to the exact commit or the version.
        # uses: conda-incubator/setup-miniconda@a4260408e20b96e80095f42ff7f1a15b27dd94ca
        uses: conda-incubator/setup-miniconda@v3.0.4
        with: 
          environment-file: environment.yml
          activate-environment: jupyterlab_stata_highlight3
          auto-activate-base: false
          
      - name: Environment check 
        run: |
          conda info
          conda list
          
          # explicitly specify node-modules rather than pnp
          jlpm config set nodeLinker node-modules
          
          # regenerate yarn.lock
          jlpm install 
          jlpm info

      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          
          python -m pip install -e .
          jupyter labextension develop . --overwrite
          jlpm run build
          
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      url: https://pypi.org/p/jupyterlab-stata-highlight3
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
